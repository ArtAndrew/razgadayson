version: '3.9'

services:
  # PostgreSQL Database with pgvector
  postgres:
    image: pgvector/pgvector:pg16
    container_name: razgazdayson_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: razgazdayson
      POSTGRES_INITDB_ARGS: "-c shared_preload_libraries=vector"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres && psql -U postgres -d razgazdayson -c 'SELECT 1 FROM pg_extension WHERE extname = '''vector''';' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: razgazdayson_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: razgazdayson_backend
    env_file:
      - ../backend/.env
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/razgazdayson
      - REDIS_URL=redis://redis:6379/0
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
    ports:
      - "8000:8000"
    volumes:
      - ../backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend Next.js
  frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/Dockerfile.frontend
    container_name: razgazdayson_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api/v1
      - NODE_ENV=development
    ports:
      - "3000:3000"
    volumes:
      - ../frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    command: npm run dev

  # Telegram Bot
  telegram-bot:
    build:
      context: ../telegram-bot
      dockerfile: ../docker/Dockerfile.bot
    container_name: razgazdayson_bot
    env_file:
      - ../telegram-bot/.env
    environment:
      - API_BASE_URL=http://backend:8000
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/razgazdayson
      - REDIS_URL=redis://redis:6379/1
      - USE_WEBHOOK=false
    volumes:
      - ../telegram-bot:/app
    depends_on:
      - backend
      - postgres
      - redis
    command: python main.py

  # Telegram WebApp (served by Nginx)
  telegram-webapp:
    build:
      context: ../telegram-webapp
      dockerfile: ../docker/Dockerfile.webapp
    container_name: razgazdayson_webapp
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api/v1
    ports:
      - "3001:80"
    volumes:
      - ../telegram-webapp:/app
      - /app/node_modules
    depends_on:
      - backend

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: razgazdayson_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@razgazdayson.ru
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: razgazdayson_redis_commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis

volumes:
  postgres_data:
  redis_data:
  pgadmin_data: