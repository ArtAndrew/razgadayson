# ai_context_v3
"""
üéØ main_goal: Start command and onboarding handlers
‚ö° critical_requirements:
   - Welcome message
   - Main menu keyboard
   - User registration
üì• inputs_outputs: /start command -> Welcome message
üîß functions_list:
   - start_command: Handle /start
   - help_command: Handle /help
üö´ forbidden_changes: None
üß™ tests: test_start_handler.py
"""

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from loguru import logger

from config import settings
from services.database import get_or_create_user
from keyboards.main import get_main_keyboard

start_router = Router(name="start")


@start_router.message(Command("start"))
async def start_command(message: types.Message) -> None:
    """Handle /start command"""
    user_id = message.from_user.id
    
    # Register or update user in database
    await get_or_create_user(
        telegram_id=user_id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    # Welcome message
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        "üåô –Ø –ø–æ–º–æ–≥—É —Ä–∞–∑–≥–∞–¥–∞—Ç—å –≤–∞—à–∏ —Å–Ω—ã —Å –ø–æ–º–æ—â—å—é AI.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Å–æ–Ω —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, "
        "–∏ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ!\n\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
    )
    
    # Main menu keyboard
    keyboard = get_main_keyboard()
    
    await message.answer(
        text=welcome_text,
        reply_markup=keyboard
    )
    
    logger.info(f"User {user_id} started the bot")


@start_router.message(Command("help"))
async def help_command(message: types.Message) -> None:
    """Handle /help command"""
    help_text = (
        "ü§ñ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
        "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´–ù–æ–≤—ã–π —Å–æ–Ω¬ª –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–Ω–∞\n"
        "2Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ —Å–æ–Ω –ø–æ–¥—Ä–æ–±–Ω–æ (–º–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤)\n"
        "3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ AI-—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –∑–∞ 30 —Å–µ–∫—É–Ω–¥\n\n"
        "üíé *Pro –ø–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç:*\n"
        "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è\n"
        "‚Ä¢ –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å —Å–æ–≤–µ—Ç–∞–º–∏\n"
        "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"
    )
    
    await message.answer(
        text=help_text,
        parse_mode="Markdown"
    )


@start_router.message(Command("webapp"))
async def webapp_command(message: types.Message) -> None:
    """Open WebApp"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(
                text="üåê –û—Ç–∫—Ä—ã—Ç—å WebApp",
                web_app=WebAppInfo(url=settings.WEBAPP_URL)
            )
        ]]
    )
    
    await message.answer(
        text="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é:",
        reply_markup=keyboard
    )