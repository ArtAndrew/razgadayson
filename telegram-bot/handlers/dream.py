# ai_context_v3
"""
üéØ main_goal: Dream interpretation handlers
‚ö° critical_requirements:
   - Text and voice input
   - Rate limiting
   - API integration
üì• inputs_outputs: Dream text/voice -> Interpretation
üîß functions_list:
   - new_dream: Start new dream
   - process_text_dream: Handle text
   - process_voice_dream: Handle voice
üö´ forbidden_changes: None
üß™ tests: test_dream_handler.py
"""

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

dream_router = Router(name="dream")


class DreamStates(StatesGroup):
    waiting_for_dream = State()


@dream_router.message(F.text == "üåô –ù–æ–≤—ã–π —Å–æ–Ω")
async def new_dream(message: types.Message, state: FSMContext) -> None:
    """Start new dream interpretation"""
    await state.set_state(DreamStates.waiting_for_dream)
    
    await message.answer(
        "–û–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Å–æ–Ω –ø–æ–¥—Ä–æ–±–Ω–æ (–º–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤).\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üé§",
        reply_markup=types.ReplyKeyboardRemove()
    )


@dream_router.message(DreamStates.waiting_for_dream, F.text)
async def process_text_dream(message: types.Message, state: FSMContext) -> None:
    """Process text dream"""
    # TODO: Implement dream processing
    await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à —Å–æ–Ω...")
    await state.clear()


@dream_router.message(DreamStates.waiting_for_dream, F.voice)
async def process_voice_dream(message: types.Message, state: FSMContext) -> None:
    """Process voice dream"""
    # TODO: Implement voice processing
    await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    await state.clear()