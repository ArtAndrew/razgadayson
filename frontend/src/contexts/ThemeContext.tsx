"use client";

/**
 * ai_context_v3
 * 
 * üéØ main_goal: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
 * 
 * ‚ö° critical_requirements:
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * - –ü–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å–≤–µ—Ç–ª–æ–π –∏ —Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π
 * - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage
 * - TypeScript —Ç–∏–ø–∏–∑–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
 * 
 * üì• inputs_outputs:
 * - Input: —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤—ã–±–æ—Ä
 * - Output: –∞–∫—Ç–∏–≤–Ω–∞—è —Ç–µ–º–∞, —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
 * 
 * üîß functions_list:
 * - useTheme(): —Ö—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ç–µ–º—ã
 * - ThemeProvider: –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 * - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
 * - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ç–µ–º–∞–º–∏
 * 
 * üö´ forbidden_changes:
 * - –ù–µ–ª—å–∑—è –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–º—ã
 * - –ù–µ–ª—å–∑—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 * 
 * üß™ tests:
 * - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
 * - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤ localStorage
 * - –ü–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Ç–µ–º–∞–º–∏
 */

import React, { createContext, useContext, useEffect, useState } from 'react';

type Theme = 'light' | 'dark' | 'system';

interface ThemeContextType {
  theme: Theme;
  effectiveTheme: 'light' | 'dark';
  setTheme: (theme: Theme) => void;
  toggleTheme: () => void;
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export function useTheme() {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
}

interface ThemeProviderProps {
  children: React.ReactNode;
  defaultTheme?: Theme;
}

export function ThemeProvider({ children, defaultTheme = 'system' }: ThemeProviderProps) {
  const [theme, setTheme] = useState<Theme>(defaultTheme);
  const [effectiveTheme, setEffectiveTheme] = useState<'light' | 'dark'>('light');
  const [isLoaded, setIsLoaded] = useState(false);

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
  const getSystemTheme = (): 'light' | 'dark' => {
    if (typeof window === 'undefined') return 'light';
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ç–µ–º—ã
  const getEffectiveTheme = (currentTheme: Theme): 'light' | 'dark' => {
    if (currentTheme === 'system') {
      return getSystemTheme();
    }
    return currentTheme;
  };

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
  const applyTheme = (newTheme: 'light' | 'dark') => {
    if (typeof window === 'undefined') return;
    
    const root = window.document.documentElement;
    root.setAttribute('data-theme', newTheme);
    
    // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º/—É–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å dark –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if (newTheme === 'dark') {
      root.classList.add('dark');
    } else {
      root.classList.remove('dark');
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã
  useEffect(() => {
    if (typeof window === 'undefined') return;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é
    const savedTheme = localStorage.getItem('theme') as Theme;
    const initialTheme = savedTheme || 'system';
    
    setTheme(initialTheme);
    const effective = getEffectiveTheme(initialTheme);
    setEffectiveTheme(effective);
    applyTheme(effective);
    setIsLoaded(true);
  }, []);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
  useEffect(() => {
    if (typeof window === 'undefined') return;

    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    const handleChange = () => {
      if (theme === 'system') {
        const newEffectiveTheme = getSystemTheme();
        setEffectiveTheme(newEffectiveTheme);
        applyTheme(newEffectiveTheme);
      }
    };

    mediaQuery.addEventListener('change', handleChange);
    return () => mediaQuery.removeEventListener('change', handleChange);
  }, [theme]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã
  const updateTheme = (newTheme: Theme) => {
    setTheme(newTheme);
    const effective = getEffectiveTheme(newTheme);
    setEffectiveTheme(effective);
    applyTheme(effective);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    if (typeof window !== 'undefined') {
      localStorage.setItem('theme', newTheme);
    }
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å–≤–µ—Ç–ª–æ–π –∏ —Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π
  const toggleTheme = () => {
    const newTheme = effectiveTheme === 'light' ? 'dark' : 'light';
    updateTheme(newTheme);
  };

  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º flash of incorrect theme
  if (!isLoaded) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-white dark:bg-slate-900">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-500"></div>
      </div>
    );
  }

  const value: ThemeContextType = {
    theme,
    effectiveTheme,
    setTheme: updateTheme,
    toggleTheme,
  };

  return (
    <ThemeContext.Provider value={value}>
      {children}
    </ThemeContext.Provider>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
export function ThemeToggle() {
  const { theme, effectiveTheme, setTheme } = useTheme();

  const handleThemeChange = () => {
    // –¶–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ: system -> light -> dark -> system
    const themeOrder: Theme[] = ['system', 'light', 'dark'];
    const currentIndex = themeOrder.indexOf(theme);
    const nextIndex = (currentIndex + 1) % themeOrder.length;
    setTheme(themeOrder[nextIndex]);
  };

  const getThemeIcon = () => {
    if (theme === 'system') {
      return effectiveTheme === 'dark' ? 'üåô' : '‚òÄÔ∏è';
    }
    return theme === 'dark' ? 'üåô' : '‚òÄÔ∏è';
  };

  const getThemeLabel = () => {
    switch (theme) {
      case 'system':
        return `–°–∏—Å—Ç–µ–º–Ω–∞—è (${effectiveTheme === 'dark' ? '–¢–µ–º–Ω–∞—è' : '–°–≤–µ—Ç–ª–∞—è'})`;
      case 'light':
        return '–°–≤–µ—Ç–ª–∞—è';
      case 'dark':
        return '–¢–µ–º–Ω–∞—è';
      default:
        return '–°–∏—Å—Ç–µ–º–Ω–∞—è';
    }
  };

  return (
    <button
      onClick={handleThemeChange}
      className="inline-flex items-center gap-2 px-3 py-2 rounded-lg text-sm font-medium transition-smooth hover-lift focus-ring bg-glass-light border border-border-light hover:bg-glass-medium"
      title={`–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: ${getThemeLabel()}`}
    >
      <span className="text-lg">{getThemeIcon()}</span>
      <span className="hidden sm:inline text-text-secondary">
        {getThemeLabel()}
      </span>
    </button>
  );
}