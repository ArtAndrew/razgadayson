// ai_context_v3
/**
 * üéØ main_goal: SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∏–º–≤–æ–ª–∞ —Å–Ω–∞
 * ‚ö° critical_requirements:
 *   - –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞
 *   - SEO meta tags –∏ structured data
 *   - –ü–æ—Ö–æ–∂–∏–µ —Å–∏–º–≤–æ–ª—ã
 *   - CTA –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
 * üì• inputs_outputs: Symbol slug -> Symbol interpretation
 * üîß functions_list:
 *   - SymbolDetailPage: –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
 *   - SymbolInterpretation: –¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ
 *   - RelatedSymbols: –ü–æ—Ö–æ–∂–∏–µ —Å–∏–º–≤–æ–ª—ã
 *   - ShareButtons: –°–æ—Ü–∏–∞–ª—å–Ω—ã–π —à–µ—Ä–∏–Ω–≥
 * üö´ forbidden_changes: –ù–µ –º–µ–Ω—è—Ç—å URL —Å—Ç—Ä—É–∫—Ç—É—Ä—É
 * üß™ tests: SEO tags, share functionality
 */

import { Metadata } from 'next';
import { notFound } from 'next/navigation';
import Link from 'next/link';
import Header from '@/components/layout/Header';
import { Button } from '@/components/ui/Button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';
import { toast } from '@/components/ui/Toast';

// –°–∏–º–≤–æ–ª—ã –¥–ª—è –¥–µ–º–æ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±—É–¥—É—Ç –∏–∑ API)
const SYMBOLS_DATABASE: Record<string, any> = {
  'water': {
    id: 'water',
    name: '–í–æ–¥–∞',
    emoji: 'üíß',
    title: '–ö —á–µ–º—É —Å–Ω–∏—Ç—Å—è –≤–æ–¥–∞',
    shortDescription: '–≠–º–æ—Ü–∏–∏ –∏ –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ',
    fullDescription: `–í–æ–¥–∞ –≤–æ —Å–Ω–µ ‚Äî –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, —Ç–µ—Å–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Å–Ω–æ–≤–∏–¥—Ü–∞ –∏ –µ–≥–æ –ø–æ–¥—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏.

**–û—Å–Ω–æ–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:**
- –ß–∏—Å—Ç–∞—è, –ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è –≤–æ–¥–∞ —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É–µ—Ç —è—Å–Ω–æ—Å—Ç—å –º—ã—Å–ª–µ–π, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ –∏ –¥—É—Ö–æ–≤–Ω–æ–µ –æ—á–∏—â–µ–Ω–∏–µ
- –ú—É—Ç–Ω–∞—è –∏–ª–∏ –≥—Ä—è–∑–Ω–∞—è –≤–æ–¥–∞ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Å–º—è—Ç–µ–Ω–∏–µ, –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –∏–ª–∏ –ø–æ–¥–∞–≤–ª–µ–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏
- –°–ø–æ–∫–æ–π–Ω–∞—è –≤–æ–¥–∞ –æ—Ç—Ä–∞–∂–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ–∫–æ–π –∏ –≥–∞—Ä–º–æ–Ω–∏—é
- –ë—É—Ä–Ω–∞—è –≤–æ–¥–∞ –∏–ª–∏ –≤–æ–ª–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—Ç –æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–æ—Ç—Ä—è—Å–µ–Ω–∏—è—Ö –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–∞—Ö

**–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞—Å–ø–µ–∫—Ç:**
–° —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏, –≤–æ–¥–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –±–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ–µ, –∏–Ω—Ç—É–∏—Ü–∏—é –∏ –∂–µ–Ω—Å–∫–æ–µ –Ω–∞—á–∞–ª–æ. –ö–∞—Ä–ª –Æ–Ω–≥ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞–ª –≤–æ–¥—É –∫–∞–∫ —Å–∏–º–≤–æ–ª –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –±–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –∂–∏–∑–Ω–µ–Ω–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏.`,
    interpretations: [
      '–ü–ª–∞–≤–∞—Ç—å –≤ —á–∏—Å—Ç–æ–π –≤–æ–¥–µ ‚Äî –∫ —É—Å–ø–µ—Ö—É –∏ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—é',
      '–¢–æ–Ω—É—Ç—å ‚Äî —Å—Ç—Ä–∞—Ö –ø–æ—Ç–µ—Ä—è—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Å–∏—Ç—É–∞—Ü–∏–µ–π',
      '–ü–∏—Ç—å –≤–æ–¥—É ‚Äî –∂–∞–∂–¥–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞–Ω–∏–π –∏–ª–∏ –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞',
      '–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –≤–æ–¥—É –≤–±—Ä–æ–¥ ‚Äî –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π'
    ],
    relatedSymbols: ['sea', 'rain', 'swimming', 'river'],
    category: 'nature',
    tags: ['—ç–º–æ—Ü–∏–∏', '–ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ', '–æ—á–∏—â–µ–Ω–∏–µ', '–∏–Ω—Ç—É–∏—Ü–∏—è']
  },
  'flight': {
    id: 'flight',
    name: '–ü–æ–ª–µ—Ç',
    emoji: 'ü¶Ö',
    title: '–ö —á–µ–º—É —Å–Ω–∏—Ç—Å—è –ø–æ–ª–µ—Ç',
    shortDescription: '–°–≤–æ–±–æ–¥–∞ –∏ –∞–º–±–∏—Ü–∏–∏',
    fullDescription: `–ü–æ–ª–µ—Ç –≤–æ —Å–Ω–µ ‚Äî –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö —è—Ä–∫–∏—Ö –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤, —á–∞—Å—Ç–æ —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –æ—â—É—â–µ–Ω–∏–µ–º —Å–≤–æ–±–æ–¥—ã, –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ–º –∫ –≤—ã—Å–æ–∫–∏–º —Ü–µ–ª—è–º.

**–û—Å–Ω–æ–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:**
- –õ–µ–≥–∫–∏–π, –ø—Ä–∏—è—Ç–Ω—ã–π –ø–æ–ª–µ—Ç —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –æ—Ç –ø—Ä–æ–±–ª–µ–º, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π
- –¢—Ä—É–¥–Ω—ã–π –ø–æ–ª–µ—Ç –∏–ª–∏ —Å—Ç—Ä–∞—Ö –≤—ã—Å–æ—Ç—ã –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –∞–º–±–∏—Ü–∏–∏, –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
- –ü–æ–ª–µ—Ç –Ω–∞–¥ –∑–Ω–∞–∫–æ–º—ã–º–∏ –º–µ—Å—Ç–∞–º–∏ ‚Äî –∂–µ–ª–∞–Ω–∏–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é —Å –Ω–æ–≤–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã
- –ü–∞–¥–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª–µ—Ç–∞ ‚Äî —Å—Ç—Ä–∞—Ö –Ω–µ—É–¥–∞—á–∏ –∏–ª–∏ –ø–æ—Ç–µ—Ä–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è

**–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞—Å–ø–µ–∫—Ç:**
–§—Ä–µ–π–¥ —Å–≤—è–∑—ã–≤–∞–ª –ø–æ–ª–µ—Ç—ã –≤–æ —Å–Ω–µ —Å —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–º–∏ –∂–µ–ª–∞–Ω–∏—è–º–∏ –∏ –ª–∏–±–∏–¥–æ. –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è —á–∞—â–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç –∏—Ö –∫–∞–∫ —Å–∏–º–≤–æ–ª –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏—è –∫ —Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.`,
    interpretations: [
      '–õ–µ—Ç–∞—Ç—å –≤—ã—Å–æ–∫–æ ‚Äî –±–æ–ª—å—à–∏–µ –∞–º–±–∏—Ü–∏–∏ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ',
      '–õ–µ—Ç–∞—Ç—å –Ω–∏–∑–∫–æ ‚Äî –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å –∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥',
      '–£—á–∏—Ç—å—Å—è –ª–µ—Ç–∞—Ç—å ‚Äî –æ—Å–≤–æ–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –∏–ª–∏ —Ä–æ–ª–µ–π',
      '–õ–µ—Ç–∞—Ç—å —Å –∫–µ–º-—Ç–æ ‚Äî —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –ø–ª–∞–Ω—ã –∏ –ø—Ä–æ–µ–∫—Ç—ã'
    ],
    relatedSymbols: ['falling', 'birds', 'wings', 'sky'],
    category: 'actions',
    tags: ['—Å–≤–æ–±–æ–¥–∞', '–∞–º–±–∏—Ü–∏–∏', '—É—Å–ø–µ—Ö', '–∫–æ–Ω—Ç—Ä–æ–ª—å']
  },
  // –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
};

interface PageProps {
  params: Promise<{ slug: string }>;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è SEO
export async function generateMetadata({ params }: PageProps): Promise<Metadata> {
  const { slug } = await params;
  const symbol = SYMBOLS_DATABASE[slug];
  
  if (!symbol) {
    return {
      title: '–°–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω',
    };
  }

  return {
    title: symbol.title,
    description: `${symbol.title} - –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ —Å–Ω–∞. ${symbol.shortDescription}. –£–∑–Ω–∞–π—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ${symbol.name.toLowerCase()} –≤ –≤–∞—à–µ–º —Å–Ω–µ.`,
    keywords: symbol.tags.join(', '),
    openGraph: {
      title: symbol.title,
      description: symbol.shortDescription,
      type: 'article',
    },
  };
}

export default async function SymbolDetailPage({ params }: PageProps) {
  const { slug } = await params;
  const symbol = SYMBOLS_DATABASE[slug];

  if (!symbol) {
    notFound();
  }

  const handleShare = async () => {
    const shareData = {
      title: symbol.title,
      text: `${symbol.title} - ${symbol.shortDescription}`,
      url: window.location.href,
    };

    try {
      if (navigator.share) {
        await navigator.share(shareData);
      } else {
        await navigator.clipboard.writeText(shareData.url);
        toast.success('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
      }
    } catch (error) {
      console.error('Error sharing:', error);
    }
  };

  // JSON-LD –¥–ª—è SEO
  const jsonLd = {
    '@context': 'https://schema.org',
    '@type': 'Article',
    headline: symbol.title,
    description: symbol.shortDescription,
    author: {
      '@type': 'Organization',
      name: '–†–∞–∑–≥–∞–¥–∞–π –°–æ–Ω',
    },
    publisher: {
      '@type': 'Organization',
      name: '–†–∞–∑–≥–∞–¥–∞–π –°–æ–Ω',
      logo: {
        '@type': 'ImageObject',
        url: 'https://razgadayson.ru/logo.png',
      },
    },
    mainEntityOfPage: {
      '@type': 'WebPage',
      '@id': `https://razgadayson.ru/catalog/${slug}`,
    },
  };

  return (
    <>
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{ __html: JSON.stringify(jsonLd) }}
      />
      
      <div className="min-h-screen">
        <Header />
        
        {/* Hero Section */}
        <section className="relative pt-24 pb-12 overflow-hidden">
          <div className="absolute inset-0 overflow-hidden pointer-events-none">
            <div className="absolute top-0 right-0 w-96 h-96 bg-primary-500/10 rounded-full blur-3xl animate-float" />
            <div className="absolute bottom-0 left-0 w-80 h-80 bg-accent-500/10 rounded-full blur-3xl animate-float" style={{ animationDelay: '3s' }} />
          </div>
          
          <div className="container relative mx-auto px-4">
            {/* Breadcrumbs */}
            <nav className="mb-8 text-sm" aria-label="Breadcrumb">
              <ol className="flex items-center space-x-2 text-mystic-text-muted">
                <li><Link href="/" className="hover:text-white transition-colors">–ì–ª–∞–≤–Ω–∞—è</Link></li>
                <li className="text-mystic-text-muted">/</li>
                <li><Link href="/catalog" className="hover:text-white transition-colors">–ö–∞—Ç–∞–ª–æ–≥ —Å–Ω–æ–≤</Link></li>
                <li className="text-mystic-text-muted">/</li>
                <li className="text-white">{symbol.name}</li>
              </ol>
            </nav>

            <div className="text-center">
              <div className="text-8xl mb-6 animate-float">{symbol.emoji}</div>
              <h1 className="text-4xl md:text-5xl font-bold text-white font-display mb-4 animate-fade-in">
                {symbol.title}
              </h1>
              <p className="text-xl text-mystic-text-secondary animate-slide-up">
                {symbol.shortDescription}
              </p>
            </div>
          </div>
        </section>

        {/* Main Content */}
        <section className="py-12">
          <div className="container mx-auto px-4 max-w-4xl">
            {/* Full Description */}
            <Card variant="glass" className="mb-8 animate-fade-in">
              <CardHeader>
                <CardTitle>–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="prose prose-invert max-w-none">
                  {symbol.fullDescription.split('\n\n').map((paragraph: string, index: number) => {
                    if (paragraph.startsWith('**') && paragraph.endsWith('**')) {
                      return (
                        <h3 key={index} className="text-xl font-semibold text-white mt-6 mb-3">
                          {paragraph.replace(/\*\*/g, '')}
                        </h3>
                      );
                    }
                    return (
                      <p key={index} className="text-mystic-text-secondary mb-4">
                        {paragraph.split('\n').map((line: string, lineIndex: number) => (
                          <span key={lineIndex}>
                            {line.startsWith('- ') ? (
                              <span className="block ml-4">‚Ä¢ {line.substring(2)}</span>
                            ) : (
                              line
                            )}
                          </span>
                        ))}
                      </p>
                    );
                  })}
                </div>
              </CardContent>
            </Card>

            {/* Interpretations */}
            <Card variant="glass" className="mb-8 animate-fade-in" style={{ animationDelay: '0.2s' }}>
              <CardHeader>
                <CardTitle>–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {symbol.interpretations.map((interpretation: string, index: number) => (
                    <div key={index} className="flex items-start gap-3">
                      <span className="text-primary-400 mt-1">‚Ä¢</span>
                      <p className="text-mystic-text-secondary">{interpretation}</p>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Tags */}
            <div className="flex flex-wrap gap-2 mb-8 animate-fade-in" style={{ animationDelay: '0.3s' }}>
              {symbol.tags.map((tag: string) => (
                <span
                  key={tag}
                  className="px-3 py-1 text-sm bg-primary-800/30 text-primary-300 rounded-full"
                >
                  #{tag}
                </span>
              ))}
            </div>

            {/* Action Buttons */}
            <div className="flex flex-wrap gap-4 mb-12 animate-fade-in" style={{ animationDelay: '0.4s' }}>
              <Button
                variant="secondary"
                onClick={handleShare}
                leftIcon={
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m9.032 4.026a3 3 0 10-5.732-1.684m5.732 1.684a3 3 0 01-5.732 1.684m0-9.368a3 3 0 105.732-1.684m-5.732 1.684m5.732-1.684m-5.732 1.684M12 12a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                }
              >
                –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
              </Button>
              
              <Button variant="primary" asChild>
                <Link href={`/?symbol=${symbol.id}`}>
                  –¢–æ–ª–∫–æ–≤–∞—Ç—å —Å–≤–æ–π —Å–æ–Ω —Å {symbol.name}
                </Link>
              </Button>
            </div>

            {/* Related Symbols */}
            {symbol.relatedSymbols && symbol.relatedSymbols.length > 0 && (
              <Card variant="glass" className="animate-fade-in" style={{ animationDelay: '0.5s' }}>
                <CardHeader>
                  <CardTitle>–°–≤—è–∑–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    {symbol.relatedSymbols.map((relatedId: string) => {
                      const related = SYMBOLS_DATABASE[relatedId];
                      if (!related) return null;
                      
                      return (
                        <Link
                          key={relatedId}
                          href={`/catalog/${relatedId}`}
                          className="text-center p-4 rounded-lg hover:bg-white/10 transition-colors"
                        >
                          <div className="text-3xl mb-2">{related.emoji}</div>
                          <p className="text-sm text-mystic-text-secondary hover:text-white transition-colors">
                            {related.name}
                          </p>
                        </Link>
                      );
                    })}
                  </div>
                </CardContent>
              </Card>
            )}
          </div>
        </section>

        {/* CTA Section */}
        <section className="py-12">
          <div className="container mx-auto px-4">
            <Card variant="gradient" className="text-center p-8">
              <h2 className="text-3xl font-bold text-white mb-4 font-display">
                –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –≤–∞—à —Å–æ–Ω?
              </h2>
              <p className="text-lg text-mystic-text-secondary mb-6">
                –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ AI-—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –¥–µ—Ç–∞–ª–µ–π
              </p>
              <Button variant="gold" size="lg" asChild>
                <Link href="/">–†–∞–∑–≥–∞–¥–∞—Ç—å —Å–≤–æ–π —Å–æ–Ω</Link>
              </Button>
            </Card>
          </div>
        </section>
      </div>
    </>
  );
}