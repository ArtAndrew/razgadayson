"use client";

/**
 * ai_context_v3
 * 
 * üéØ main_goal: –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å—Ç–∏–ª–µ Apple —Å Glassmorphism —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
 * 
 * ‚ö° critical_requirements:
 * - –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–Ω–æ–≤
 * - Telegram OAuth –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–±
 * - Email –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ pending —Å–Ω–∞ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
 * - Apple-—Å—Ç–∏–ª—å –¥–∏–∑–∞–π–Ω —Å –∫—Ä—É–ø–Ω–æ–π —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–æ–π
 * - Glassmorphism –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã
 * - –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å mobile-first
 * - –ü–ª–∞–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ –º–∏–∫—Ä–æ–∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏–∏
 * 
 * üì• inputs_outputs:
 * - Input: Telegram auth data, email/password, URL params (reason, redirect)
 * - Output: Authenticated user session, navigation to target page
 * 
 * üîß functions_list:
 * - LoginContent: –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å —Ñ–æ—Ä–º–∞–º–∏
 * - handleTelegramAuth: –û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram OAuth
 * - handleEmailSubmit: Email –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–æ—Ç–∫–ª—é—á–µ–Ω–∞)
 * - handleAuthSuccess: Redirect –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * 
 * üö´ forbidden_changes:
 * - –ù–µ–ª—å–∑—è —Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–æ–ª–∏ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ
 * - –ù–µ–ª—å–∑—è –Ω–∞—Ä—É—à–∞—Ç—å security flow
 * - –ù–µ–ª—å–∑—è —É–±–∏—Ä–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É pending —Å–Ω–∞
 * 
 * üß™ tests:
 * - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ Telegram OAuth
 * - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π redirect –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ pending —Å–Ω–∞
 * - –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
 */

import { useEffect, useState, Suspense } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';
import Script from 'next/script';
import { useTelegramLogin, useEmailLogin } from '@/hooks/useAuth';
import { toast } from '@/components/ui/Toast';
import { Button } from '@/components/ui/Button';
import { GlassCard, BentoCard } from '@/components/ui/Card';
import { Textarea } from '@/components/ui/Input';
import type { TelegramAuthData } from '@/types/auth';

// Telegram Bot username from environment
const TELEGRAM_BOT_USERNAME = process.env.NEXT_PUBLIC_TELEGRAM_BOT_USERNAME || 'razgazdayson_bot';

function LoginContent() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const reason = searchParams.get('reason');
  const redirect = searchParams.get('redirect');
  
  const [showEmailForm, setShowEmailForm] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isLoaded, setIsLoaded] = useState(false);
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  
  const telegramLogin = useTelegramLogin();
  const emailLogin = useEmailLogin();

  // –ü–∞—Ä–∞–ª–ª–∞–∫—Å —ç—Ñ—Ñ–µ–∫—Ç—ã
  useEffect(() => {
    const handleMouseMove = (e: MouseEvent) => {
      setMousePosition({ 
        x: (e.clientX / window.innerWidth) - 0.5, 
        y: (e.clientY / window.innerHeight) - 0.5 
      });
    };
    
    const handleLoad = () => {
      setIsLoaded(true);
    };

    window.addEventListener('mousemove', handleMouseMove);
    window.addEventListener('load', handleLoad);
    setIsLoaded(true);

    return () => {
      window.removeEventListener('mousemove', handleMouseMove);
      window.removeEventListener('load', handleLoad);
    };
  }, []);

  // Handle Telegram auth callback
  useEffect(() => {
    // Expose callback function for Telegram widget
    (window as any).onTelegramAuth = (user: TelegramAuthData) => {
      handleTelegramAuth(user);
    };

    return () => {
      delete (window as any).onTelegramAuth;
    };
  }, []);

  const handleTelegramAuth = async (authData: TelegramAuthData) => {
    try {
      await telegramLogin.mutateAsync(authData);
      handleAuthSuccess();
    } catch (error: any) {
      toast.error(error.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram');
    }
  };

  const handleEmailSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      await emailLogin.mutateAsync({ email, password });
      handleAuthSuccess();
    } catch (error: any) {
      toast.error(error.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
    }
  };

  const handleAuthSuccess = () => {
    // Check if there's a pending dream
    const pendingDream = sessionStorage.getItem('pendingDream');
    
    if (pendingDream) {
      sessionStorage.removeItem('pendingDream');
      toast.success('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –°–µ–π—á–∞—Å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à —Å–æ–Ω');
      router.push(`/?dream=${encodeURIComponent(pendingDream)}`);
    } else if (redirect) {
      router.push(decodeURIComponent(redirect));
    } else {
      toast.success('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!');
      router.push('/');
    }
  };

  // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏—á–∏–Ω—ã
  const getReasonMessage = () => {
    switch (reason) {
      case 'dream_analysis':
        return {
          title: '–í–æ–π–¥–∏—Ç–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–Ω–∞',
          description: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö —Å–Ω–æ–≤',
          color: 'from-primary-500/20 to-accent-cyan/20',
          icon: 'üåô'
        };
      case 'get_started':
        return {
          title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
          description: '–°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∏ –Ω–∞—á–Ω–∏—Ç–µ —Ä–∞–∑–≥–∞–¥—ã–≤–∞—Ç—å —Å–≤–æ–∏ —Å–Ω—ã',
          color: 'from-accent-emerald/20 to-primary-500/20',
          icon: '‚ú®'
        };
      case 'session_expired':
        return {
          title: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞',
          description: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –µ—â–µ —Ä–∞–∑',
          color: 'from-accent-pink/20 to-red-400/20',
          icon: '‚è∞'
        };
      default:
        return {
          title: '–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç',
          description: '–ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º —Å–µ—Ä–≤–∏—Å–∞',
          color: 'from-primary-500/20 to-accent-cyan/20',
          icon: 'üöÄ'
        };
    }
  };

  const reasonData = getReasonMessage();

  return (
    <div className="min-h-screen relative overflow-hidden bg-bg-primary">
      {/* Modern mesh gradient background */}
      <div className="fixed inset-0 -z-10">
        <div 
          className="absolute top-20 left-10 w-96 h-96 bg-gradient-to-r from-primary-500/15 to-accent-cyan/15 rounded-full blur-3xl animate-float"
          style={{
            transform: `translate(${mousePosition.x * 20}px, ${mousePosition.y * 20}px)`
          }}
        />
        <div 
          className="absolute bottom-20 right-10 w-80 h-80 bg-gradient-to-r from-accent-pink/15 to-primary-600/15 rounded-full blur-3xl animate-float"
          style={{
            transform: `translate(${mousePosition.x * -15}px, ${mousePosition.y * -15}px)`,
            animationDelay: '2s'
          }}
        />
        <div 
          className="absolute top-1/2 left-1/2 w-64 h-64 bg-gradient-to-r from-accent-emerald/15 to-accent-cyan/15 rounded-full blur-3xl animate-float"
          style={{
            transform: `translate(-50%, -50%) translate(${mousePosition.x * 10}px, ${mousePosition.y * 10}px)`,
            animationDelay: '4s'
          }}
        />
      </div>

      <div className="flex min-h-screen items-center justify-center px-4 py-12">
        <div className="w-full max-w-lg">
          {/* Main Auth Card */}
          <div 
            className={`transform transition-all duration-1000 ${isLoaded ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'}`}
          >
            <GlassCard className="p-8 md:p-10 text-center relative overflow-hidden">
              {/* Logo and Header */}
              <div className="mb-8">
                <Link href="/" className="inline-block group">
                  <div className="w-16 h-16 mx-auto mb-4 rounded-2xl bg-gradient-primary flex items-center justify-center group-hover:scale-110 transition-smooth">
                    <span className="text-white text-2xl">üåô</span>
                  </div>
                  <h1 className="text-4xl font-black text-text-primary font-display mb-2 group-hover:text-primary-500 transition-smooth">
                    –†–∞–∑–≥–∞–¥–∞–π –°–æ–Ω
                  </h1>
                </Link>
                <p className="text-lg text-text-secondary leading-relaxed">
                  –¢–∞–π–Ω—ã –≤–∞—à–∏—Ö —Å–Ω–æ–≤ —Ä–∞—Å–∫—Ä—ã—Ç—ã
                </p>
              </div>

              {/* Reason Message */}
              {reason && (
                <div className={`mb-8 p-6 rounded-2xl bg-gradient-to-r ${reasonData.color} border border-border-light animate-scale-in`}>
                  <div className="flex items-center justify-center gap-3 mb-3">
                    <span className="text-3xl">{reasonData.icon}</span>
                    <h3 className="text-xl font-bold text-text-primary">{reasonData.title}</h3>
                  </div>
                  <p className="text-text-secondary leading-relaxed">{reasonData.description}</p>
                </div>
              )}

              {/* Telegram Login Section */}
              <div className="mb-8">
                <div className="mb-6">
                  <h2 className="text-2xl font-bold text-text-primary mb-2">
                    –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram
                  </h2>
                  <p className="text-text-secondary">
                    –ú—É–¥—Ä–æ—Å—Ç—å –≤–µ–∫–æ–≤ –≤ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ —Å–Ω–æ–≤
                  </p>
                </div>

                <div className="flex justify-center mb-4">
                  <div id="telegram-login-container" className="hover-lift transition-smooth">
                    <Script
                      src="https://telegram.org/js/telegram-widget.js?22"
                      strategy="lazyOnload"
                      onLoad={() => {
                        // Initialize Telegram widget
                        (window as any).TelegramLoginWidget = {
                          dataOnauth: (user: TelegramAuthData) => {
                            (window as any).onTelegramAuth(user);
                          }
                        };
                      }}
                    />
                    <div
                      dangerouslySetInnerHTML={{
                        __html: `
                          <script 
                            async 
                            src="https://telegram.org/js/telegram-widget.js?22" 
                            data-telegram-login="${TELEGRAM_BOT_USERNAME}"
                            data-size="large"
                            data-radius="12"
                            data-onauth="onTelegramAuth(user)"
                            data-request-access="write"
                          ></script>
                        `
                      }}
                    />
                  </div>
                </div>

                <div className="flex items-center gap-3 justify-center text-sm text-text-muted">
                  <div className="w-2 h-2 bg-accent-emerald rounded-full animate-pulse" />
                  <span>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã</span>
                  <div className="w-2 h-2 bg-primary-500 rounded-full animate-pulse" style={{ animationDelay: '0.5s' }} />
                </div>
              </div>

              {/* Divider */}
              <div className="relative mb-8">
                <div className="absolute inset-0 flex items-center">
                  <div className="w-full border-t border-border-light"></div>
                </div>
                <div className="relative flex justify-center text-sm">
                  <span className="bg-bg-primary px-4 text-text-muted">–∏–ª–∏</span>
                </div>
              </div>

              {/* Email Login Section */}
              {!showEmailForm ? (
                <Button
                  onClick={() => setShowEmailForm(true)}
                  variant="outline"
                  size="lg"
                  fullWidth
                  className="mb-6"
                >
                  <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                  </svg>
                  –í–æ–π—Ç–∏ —Å email (—Å–∫–æ—Ä–æ)
                </Button>
              ) : (
                <div className="mb-6 animate-slide-up">
                  <form onSubmit={handleEmailSubmit} className="space-y-6">
                    <div className="text-left">
                      <label htmlFor="email" className="block text-sm font-semibold text-text-primary mb-2">
                        Email –∞–¥—Ä–µ—Å
                      </label>
                      <input
                        type="email"
                        id="email"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        className="w-full rounded-xl border border-border-medium bg-bg-secondary/50 px-4 py-3 text-text-primary placeholder-text-muted focus-ring transition-smooth"
                        placeholder="your@email.com"
                        required
                        disabled
                      />
                    </div>
                    <div className="text-left">
                      <label htmlFor="password" className="block text-sm font-semibold text-text-primary mb-2">
                        –ü–∞—Ä–æ–ª—å
                      </label>
                      <input
                        type="password"
                        id="password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        className="w-full rounded-xl border border-border-medium bg-bg-secondary/50 px-4 py-3 text-text-primary placeholder-text-muted focus-ring transition-smooth"
                        placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                        required
                        disabled
                      />
                    </div>
                    
                    <div className="bg-bg-tertiary/50 rounded-xl p-4 border border-border-light">
                      <div className="flex items-start gap-3">
                        <div className="w-6 h-6 mt-0.5 rounded-full bg-accent-pink/20 flex items-center justify-center flex-shrink-0">
                          <svg className="w-4 h-4 text-accent-pink" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                          </svg>
                        </div>
                        <div className="text-sm text-text-secondary">
                          <strong className="text-text-primary">Email –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.</strong><br />
                          –ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram.
                        </div>
                      </div>
                    </div>
                    
                    <div className="flex gap-3">
                      <Button
                        type="button"
                        onClick={() => setShowEmailForm(false)}
                        variant="outline"
                        size="lg"
                        fullWidth
                      >
                        –ù–∞–∑–∞–¥
                      </Button>
                      <Button
                        type="submit"
                        variant="primary"
                        size="lg"
                        fullWidth
                        disabled
                        className="opacity-50"
                      >
                        –í–æ–π—Ç–∏
                      </Button>
                    </div>
                  </form>
                </div>
              )}

              {/* Register link */}
              <div className="text-center">
                <span className="text-text-muted">–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? </span>
                <Link href="/register" className="font-semibold text-primary-500 hover:text-primary-600 transition-colors hover-lift">
                  –°–æ–∑–¥–∞–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ
                </Link>
              </div>

              {/* Background decoration */}
              <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-r from-primary-500/10 to-accent-cyan/10 rounded-full blur-3xl -z-0" />
              <div className="absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-r from-accent-pink/10 to-primary-600/10 rounded-full blur-3xl -z-0" />
            </GlassCard>
          </div>

          {/* Benefits Section */}
          <div 
            className={`mt-8 transform transition-all duration-1000 ${isLoaded ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'}`}
            style={{ transitionDelay: '0.2s' }}
          >
            <BentoCard className="p-6 text-center">
              <h3 className="text-xl font-bold text-text-primary mb-4">
                –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ
              </h3>
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div className="flex items-center gap-2 text-text-secondary">
                  <div className="w-2 h-2 bg-accent-emerald rounded-full" />
                  <span>–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫</span>
                </div>
                <div className="flex items-center gap-2 text-text-secondary">
                  <div className="w-2 h-2 bg-primary-500 rounded-full" />
                  <span>–ê–Ω–∞–ª–∏–∑ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤</span>
                </div>
                <div className="flex items-center gap-2 text-text-secondary">
                  <div className="w-2 h-2 bg-accent-cyan rounded-full" />
                  <span>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤</span>
                </div>
                <div className="flex items-center gap-2 text-text-secondary">
                  <div className="w-2 h-2 bg-accent-pink rounded-full" />
                  <span>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</span>
                </div>
              </div>
            </BentoCard>
          </div>

          {/* Loading overlay */}
          {(telegramLogin.isPending || emailLogin.isPending) && (
            <div className="fixed inset-0 flex items-center justify-center bg-black/50 backdrop-blur-sm z-50">
              <GlassCard className="p-8 text-center max-w-sm">
                <div className="w-16 h-16 mx-auto mb-4 rounded-2xl bg-gradient-primary flex items-center justify-center animate-pulse">
                  <svg className="w-8 h-8 text-white animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
                  </svg>
                </div>
                <h3 className="text-xl font-bold text-text-primary mb-2">–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...</h3>
                <p className="text-text-secondary">–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É</p>
              </GlassCard>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default function LoginPage() {
  return (
    <Suspense fallback={
      <div className="min-h-screen flex items-center justify-center bg-bg-primary">
        <GlassCard className="p-8 text-center">
          <div className="w-12 h-12 mx-auto mb-4 rounded-xl bg-gradient-primary flex items-center justify-center animate-pulse">
            <span className="text-white text-xl">üåô</span>
          </div>
          <p className="text-text-secondary">–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞...</p>
        </GlassCard>
      </div>
    }>
      <LoginContent />
    </Suspense>
  );
}